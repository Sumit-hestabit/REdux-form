{"ast":null,"code":"var _jsxFileName = \"/var/www/redux-form/redux-form/src/CheckboxGroup.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CheckboxGroup extends React.Component {\n  checkboxGroup() {\n    let {\n      label,\n      required,\n      options,\n      input,\n      meta,\n      techsKnown\n    } = this.props;\n    return options.map((option, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"checkbox\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            name: `${input.techsKnown}[${index}]`,\n            value: option.techsKnown,\n            checked: input.techsKnown.indexOf(option.techsKnown) !== -1,\n            onChange: event => {\n              const newValue = [...input.value];\n\n              if (event.target.checked) {\n                newValue.push(option.techsKnown);\n              } else {\n                newValue.splice(newValue.indexOf(option.techsKnown), 1);\n              }\n\n              return input.onChange(newValue);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 12,\n            columnNumber: 21\n          }, this), option.techsKnown]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 17\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 13\n      }, this);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.checkboxGroup()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default CheckboxGroup;","map":{"version":3,"sources":["/var/www/redux-form/redux-form/src/CheckboxGroup.js"],"names":["React","CheckboxGroup","Component","checkboxGroup","label","required","options","input","meta","techsKnown","props","map","option","index","indexOf","event","newValue","value","target","checked","push","splice","onChange","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,aAAN,SAA4BD,KAAK,CAACE,SAAlC,CAA4C;AAExCC,EAAAA,aAAa,GAAG;AACZ,QAAI;AAACC,MAAAA,KAAD;AAAQC,MAAAA,QAAR;AAAkBC,MAAAA,OAAlB;AAA2BC,MAAAA,KAA3B;AAAkCC,MAAAA,IAAlC;AAAuCC,MAAAA;AAAvC,QAAqD,KAAKC,KAA9D;AAEA,WAAOJ,OAAO,CAACK,GAAR,CAAY,CAACC,MAAD,EAASC,KAAT,KAAmB;AAClC,0BACA;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,+BACI;AAAA,kCACI;AAAO,YAAA,IAAI,EAAC,UAAZ;AACO,YAAA,IAAI,EAAG,GAAEN,KAAK,CAACE,UAAW,IAAGI,KAAM,GAD1C;AAEO,YAAA,KAAK,EAAED,MAAM,CAACH,UAFrB;AAGO,YAAA,OAAO,EAAEF,KAAK,CAACE,UAAN,CAAiBK,OAAjB,CAAyBF,MAAM,CAACH,UAAhC,MAAgD,CAAC,CAHjE;AAIO,YAAA,QAAQ,EAAGM,KAAD,IAAW;AACjB,oBAAMC,QAAQ,GAAG,CAAC,GAAGT,KAAK,CAACU,KAAV,CAAjB;;AACA,kBAAIF,KAAK,CAACG,MAAN,CAAaC,OAAjB,EAA0B;AACtBH,gBAAAA,QAAQ,CAACI,IAAT,CAAcR,MAAM,CAACH,UAArB;AACH,eAFD,MAEO;AACHO,gBAAAA,QAAQ,CAACK,MAAT,CAAgBL,QAAQ,CAACF,OAAT,CAAiBF,MAAM,CAACH,UAAxB,CAAhB,EAAqD,CAArD;AACH;;AAED,qBAAOF,KAAK,CAACe,QAAN,CAAeN,QAAf,CAAP;AACH;AAbR;AAAA;AAAA;AAAA;AAAA,kBADJ,EAeKJ,MAAM,CAACH,UAfZ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,SAA+BI,KAA/B;AAAA;AAAA;AAAA;AAAA,cADA;AAoBH,KArBM,CAAP;AAsBH;;AAEDU,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,gBACK,KAAKpB,aAAL;AADL;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AAnCuC;;AAuC5C,eAAeF,aAAf","sourcesContent":["import React from 'react';\n\nclass CheckboxGroup extends React.Component {\n\n    checkboxGroup() {\n        let {label, required, options, input, meta,techsKnown} = this.props;\n\n        return options.map((option, index) => {\n            return (\n            <div className=\"checkbox\" key={index}>\n                <label>\n                    <input type=\"checkbox\"\n                           name={`${input.techsKnown}[${index}]`}\n                           value={option.techsKnown}\n                           checked={input.techsKnown.indexOf(option.techsKnown) !== -1}\n                           onChange={(event) => {\n                               const newValue = [...input.value];\n                               if (event.target.checked) {\n                                   newValue.push(option.techsKnown);\n                               } else {\n                                   newValue.splice(newValue.indexOf(option.techsKnown), 1);\n                               }\n\n                               return input.onChange(newValue);\n                           }}/>\n                    {option.techsKnown}\n                </label>\n            </div>)\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                {this.checkboxGroup()}\n            </div>\n        )\n    }\n}\n\n\nexport default CheckboxGroup;"]},"metadata":{},"sourceType":"module"}