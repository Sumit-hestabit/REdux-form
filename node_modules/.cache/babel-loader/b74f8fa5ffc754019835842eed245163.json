{"ast":null,"code":"var _jsxFileName = \"/var/www/redux-form/redux-form/src/CheckboxGroup.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const checkboxGroup = _ref => {\n  let {\n    input: {\n      name,\n      ...inputProps\n    },\n    meta: {\n      touched,\n      error,\n      form\n    },\n    touch\n  } = _ref;\n  const hasError = !!(touched && error);\n  return options.map((option, index) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"checkbox\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          name: `${input.name}[${index}]`,\n          value: option.name,\n          checked: input.value.indexOf(option.name) !== -1,\n          onChange: event => {\n            touch(form, name);\n            const newValue = [...input.value];\n\n            if (event.target.checked) {\n              newValue.push(option.name);\n            } else {\n              newValue.splice(newValue.indexOf(option.name), 1);\n            }\n\n            return input.onChange(newValue);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 17\n        }, this), hasError && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"This must be ticked!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 37\n        }, this), option.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 13\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }, this);\n  });\n};\nexport default CheckboxGroup;","map":{"version":3,"sources":["/var/www/redux-form/redux-form/src/CheckboxGroup.js"],"names":["checkboxGroup","input","name","inputProps","meta","touched","error","form","touch","hasError","options","map","option","index","value","indexOf","event","newValue","target","checked","push","splice","onChange","CheckboxGroup"],"mappings":";;AAAA,OAAO,MAAMA,aAAa,GAAG,QAIrB;AAAA,MAJsB;AAC1BC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,IAAF;AAAQ,SAAGC;AAAX,KADmB;AAE1BC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,KAAX;AAAkBC,MAAAA;AAAlB,KAFoB;AAG1BC,IAAAA;AAH0B,GAItB;AACJ,QAAMC,QAAQ,GAAG,CAAC,EAAEJ,OAAO,IAAIC,KAAb,CAAlB;AAEA,SAAOI,OAAO,CAACC,GAAR,CAAY,CAACC,MAAD,EAASC,KAAT,KAAmB;AAClC,wBACA;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACI;AAAA,gCACI;AAAO,UAAA,IAAI,EAAC,UAAZ;AACO,UAAA,IAAI,EAAG,GAAEZ,KAAK,CAACC,IAAK,IAAGW,KAAM,GADpC;AAEO,UAAA,KAAK,EAAED,MAAM,CAACV,IAFrB;AAGO,UAAA,OAAO,EAAED,KAAK,CAACa,KAAN,CAAYC,OAAZ,CAAoBH,MAAM,CAACV,IAA3B,MAAqC,CAAC,CAHtD;AAIO,UAAA,QAAQ,EAAGc,KAAD,IAAW;AACjBR,YAAAA,KAAK,CAACD,IAAD,EAAOL,IAAP,CAAL;AACA,kBAAMe,QAAQ,GAAG,CAAC,GAAGhB,KAAK,CAACa,KAAV,CAAjB;;AACA,gBAAIE,KAAK,CAACE,MAAN,CAAaC,OAAjB,EAA0B;AACtBF,cAAAA,QAAQ,CAACG,IAAT,CAAcR,MAAM,CAACV,IAArB;AACH,aAFD,MAEO;AACHe,cAAAA,QAAQ,CAACI,MAAT,CAAgBJ,QAAQ,CAACF,OAAT,CAAiBH,MAAM,CAACV,IAAxB,CAAhB,EAA+C,CAA/C;AACH;;AAED,mBAAOD,KAAK,CAACqB,QAAN,CAAeL,QAAf,CAAP;AACH;AAdR;AAAA;AAAA;AAAA;AAAA,gBADJ,EAgBYR,QAAQ,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhBxB,EAiBKG,MAAM,CAACV,IAjBZ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,OAA+BW,KAA/B;AAAA;AAAA;AAAA;AAAA,YADA;AAsBH,GAvBM,CAAP;AAwBD,CA/BI;AAgCL,eAAeU,aAAf","sourcesContent":["export const checkboxGroup = ({\n    input: { name, ...inputProps },\n    meta: { touched, error, form },\n    touch\n  }) => {\n    const hasError = !!(touched && error);\n   \n    return options.map((option, index) => {\n        return (\n        <div className=\"checkbox\" key={index}>\n            <label>\n                <input type=\"checkbox\"\n                       name={`${input.name}[${index}]`}\n                       value={option.name}\n                       checked={input.value.indexOf(option.name) !== -1}\n                       onChange={(event) => {\n                           touch(form, name);\n                           const newValue = [...input.value];\n                           if (event.target.checked) {\n                               newValue.push(option.name);\n                           } else {\n                               newValue.splice(newValue.indexOf(option.name), 1);\n                           }\n\n                           return input.onChange(newValue);\n                       }}/>\n                       {hasError && <div>This must be ticked!</div>}\n                {option.name}\n            </label>\n        </div>)\n    });\n  };\n  export default CheckboxGroup;"]},"metadata":{},"sourceType":"module"}