{"ast":null,"code":"var _jsxFileName = \"/var/www/redux-form/redux-form/src/CheckboxGroup.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport styled from \"styled-components\";\nimport Tag from 'app/atomic/Tag';\nimport InputError from './inputError';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CheckboxGroup = props => {\n  _s();\n\n  const [options, setOptions] = useState([]);\n  useEffect(() => {\n    setOptions(props.options);\n  }, [props.options]);\n\n  const onChange = option => {\n    const {\n      input: {\n        value,\n        onChange\n      }\n    } = props;\n    let selectedArr = value || [];\n\n    let index = _.findIndex(options, {\n      id: option.id\n    });\n\n    if (options[index] && options[index].is_select) {\n      options[index].is_select = false;\n      selectedArr = _.remove(selectedArr, item => {\n        return item.id !== option.id;\n      });\n    } else {\n      selectedArr = [...selectedArr, option];\n      options[index].is_select = true;\n    }\n\n    setOptions(options);\n    onChange(selectedArr);\n  };\n\n  const {\n    label,\n    moreBtnText,\n    meta: {\n      touched,\n      error\n    }\n  } = props;\n  return /*#__PURE__*/_jsxDEV(StyleCheckboxInput, {\n    style: {\n      color: props.textColor\n    },\n    checkColor: {\n      checked: props.checkedColor\n    },\n    className: \"type-selector\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), options && options.map((option, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"checkbox_groups\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: option.id,\n          onChange: e => onChange(option)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: option.id,\n          children: option.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 24\n      }, this);\n    }), touched && error && /*#__PURE__*/_jsxDEV(InputError, {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 35\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CheckboxGroup, \"Cb37lItZDPBl0Zl/uTamqIOmlew=\");\n\n_c = CheckboxGroup;\nexport default CheckboxGroup;\nconst StyleCheckboxInput = styled.div`\ndisplay:flex;\nalign-items:center;\nflex-wrap:wrap;\ncolor: ${props => props.theme.colors.textColor};\n.checkbox_groups{\n    margin-right:0px;\n    input{\n        display:none;\n        & ~ label{\n            padding: 0px 14px;\n            color: ${props => props.theme.colors.textColor};\n            font-size: 14px;\n            font-weight: 400;\n            letter-spacing: 0px;\n            line-height: 35px;\n            text-align: center;\n            border-radius:25px;\n            height:35px;\n            border:1px solid transparent;\n            background-color:#f5f5f5;\n            outline:none;\n            display:inline-block;\n            margin-right:15px;\n            cursor:pointer;\n            &:focus{\n                box-shadow:none;\n            }\n        }\n        &:checked{\n            & ~ label{\n                color:${props => props.style.color};\n                background-color:${props => props.checkColor.checked};\n            }\n        }\n    }\n}\n.show-more-btn{\n    color: ${props => props.theme.colors.textColor};\n    cursor: pointer;\n    font-size:15px;\n    cursor:pointer;\n}\n`;\n_c2 = StyleCheckboxInput;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CheckboxGroup\");\n$RefreshReg$(_c2, \"StyleCheckboxInput\");","map":{"version":3,"sources":["/var/www/redux-form/redux-form/src/CheckboxGroup.js"],"names":["React","useState","useEffect","styled","Tag","InputError","CheckboxGroup","props","options","setOptions","onChange","option","input","value","selectedArr","index","_","findIndex","id","is_select","remove","item","label","moreBtnText","meta","touched","error","color","textColor","checked","checkedColor","map","e","text","StyleCheckboxInput","div","theme","colors","style","checkColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport styled from \"styled-components\";\nimport Tag from 'app/atomic/Tag'\nimport InputError from './inputError';\n\nconst CheckboxGroup = (props) => {\n\n    const [options, setOptions] = useState([])\n   \n    useEffect(() => {\n        setOptions(props.options)\n    }, [props.options])\n\n    const onChange = (option) => {\n        const { input: { value, onChange } } = props\n        let selectedArr = value || []\n        let index = _.findIndex(options, {id: option.id})\n        if(options[index] && options[index].is_select){\n            options[index].is_select = false\n            selectedArr = _.remove(selectedArr, (item) => {\n                return item.id !== option.id;\n            });\n        }else{\n            selectedArr = [...selectedArr, option]\n            options[index].is_select = true\n        }\n        setOptions(options)\n        onChange(selectedArr)\n    }\n\n    const { label,moreBtnText, meta: { touched, error }} = props  \n    \n    return(\n        <StyleCheckboxInput style={{color: props.textColor}} checkColor={{checked: props.checkedColor}} className=\"type-selector\">\n            <label>{label}</label>\n            {options && options.map((option, index) => {\n                return <div className=\"checkbox_groups\">\n                            <input \n                                type=\"checkbox\"\n                                id={option.id}\n                                key={index} \n                                onChange={(e) => onChange(option)}\n                            />\n                            <label htmlFor={option.id}>{option.text}</label> \n                        </div>\n            })}\n            {touched && (error && <InputError>{error}</InputError>)}\n        </StyleCheckboxInput>\n    )\n}\n\nexport default CheckboxGroup\n\nconst StyleCheckboxInput = styled.div`\ndisplay:flex;\nalign-items:center;\nflex-wrap:wrap;\ncolor: ${props => props.theme.colors.textColor};\n.checkbox_groups{\n    margin-right:0px;\n    input{\n        display:none;\n        & ~ label{\n            padding: 0px 14px;\n            color: ${props => props.theme.colors.textColor};\n            font-size: 14px;\n            font-weight: 400;\n            letter-spacing: 0px;\n            line-height: 35px;\n            text-align: center;\n            border-radius:25px;\n            height:35px;\n            border:1px solid transparent;\n            background-color:#f5f5f5;\n            outline:none;\n            display:inline-block;\n            margin-right:15px;\n            cursor:pointer;\n            &:focus{\n                box-shadow:none;\n            }\n        }\n        &:checked{\n            & ~ label{\n                color:${props => props.style.color};\n                background-color:${props => props.checkColor.checked};\n            }\n        }\n    }\n}\n.show-more-btn{\n    color: ${props => props.theme.colors.textColor};\n    cursor: pointer;\n    font-size:15px;\n    cursor:pointer;\n}\n`;"]},"metadata":{},"sourceType":"module"}