{"ast":null,"code":"import { alertActions } from './alertActions';\nexport const userActions = {\n  register\n};\n\nfunction register(user) {\n  return dispatch => {\n    dispatch(request(user));\n    userService.register(user).then(user => {\n      dispatch(success(user));\n      dispatch(alertActions.success('Registration successful'));\n    }, error => {\n      dispatch(failure(error));\n      dispatch(alertActions.error(error));\n    });\n  };\n\n  function request(user) {\n    return {\n      type: 'REGISTER_REQUEST',\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: 'REGISTER_SUCCESS',\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: 'REGISTER_FAILURE',\n      error\n    };\n  }\n}","map":{"version":3,"sources":["/var/www/redux-form/redux-form/src/action.js"],"names":["alertActions","userActions","register","user","dispatch","request","userService","then","success","error","failure","type"],"mappings":"AACA,SAASA,YAAT,QAA6B,gBAA7B;AAEA,OAAO,MAAMC,WAAW,GAAG;AACxBC,EAAAA;AADwB,CAApB;;AAIP,SAASA,QAAT,CAAmBC,IAAnB,EAAyB;AACrB,SAAOC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACC,OAAO,CAACF,IAAD,CAAR,CAAR;AAEAG,IAAAA,WAAW,CAACJ,QAAZ,CAAqBC,IAArB,EACKI,IADL,CAEQJ,IAAI,IAAI;AACJC,MAAAA,QAAQ,CAACI,OAAO,CAACL,IAAD,CAAR,CAAR;AACAC,MAAAA,QAAQ,CAACJ,YAAY,CAACQ,OAAb,CAAqB,yBAArB,CAAD,CAAR;AACH,KALT,EAMQC,KAAK,IAAI;AACLL,MAAAA,QAAQ,CAACM,OAAO,CAACD,KAAD,CAAR,CAAR;AACAL,MAAAA,QAAQ,CAACJ,YAAY,CAACS,KAAb,CAAmBA,KAAnB,CAAD,CAAR;AACH,KATT;AAWH,GAdD;;AAgBA,WAASJ,OAAT,CAAkBF,IAAlB,EAAwB;AAAE,WAAO;AAAEQ,MAAAA,IAAI,EAAE,kBAAR;AAA4BR,MAAAA;AAA5B,KAAP;AAA4C;;AACtE,WAASK,OAAT,CAAkBL,IAAlB,EAAwB;AAAE,WAAO;AAAEQ,MAAAA,IAAI,EAAE,kBAAR;AAA4BR,MAAAA;AAA5B,KAAP;AAA4C;;AACtE,WAASO,OAAT,CAAkBD,KAAlB,EAAyB;AAAE,WAAO;AAAEE,MAAAA,IAAI,EAAE,kBAAR;AAA4BF,MAAAA;AAA5B,KAAP;AAA6C;AAC3E","sourcesContent":["\nimport { alertActions } from './alertActions';\n\nexport const userActions = {\n   register\n }\n\nfunction register (user) {\n    return dispatch => {\n        dispatch(request(user));\n\n        userService.register(user)\n            .then(\n                user => {\n                    dispatch(success(user));\n                    dispatch(alertActions.success('Registration successful'));\n                },\n                error => {\n                    dispatch(failure(error));\n                    dispatch(alertActions.error(error));\n                }\n            );\n    };\n\n    function request (user) { return { type: 'REGISTER_REQUEST', user }; }\n    function success (user) { return { type: 'REGISTER_SUCCESS', user }; }\n    function failure (error) { return { type: 'REGISTER_FAILURE', error }; }\n}\n"]},"metadata":{},"sourceType":"module"}