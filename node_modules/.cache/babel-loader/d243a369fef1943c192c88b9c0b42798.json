{"ast":null,"code":"var _jsxFileName = \"/var/www/redux-form/redux-form/src/renderField.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst renderField = _ref => {\n  let {\n    input,\n    label,\n    type,\n    meta: {\n      touched,\n      error\n    }\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", { ...input,\n        placeholder: label,\n        type: type\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 11\n      }, this), touched && error && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 4,\n    columnNumber: 7\n  }, this);\n};\n\nexport { renderField };","map":{"version":3,"sources":["/var/www/redux-form/redux-form/src/renderField.js"],"names":["React","renderField","input","label","type","meta","touched","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEI,MAAMC,WAAW,GAAG;AAAA,MAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,IAAhB;AAAsBC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX;AAA5B,GAAD;AAAA,sBAClB;AAAA,4BACE;AAAA,gBAAQJ;AAAR;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,8BACE,sBAAWD,KAAX;AAAkB,QAAA,WAAW,EAAEC,KAA/B;AAAsC,QAAA,IAAI,EAAEC;AAA5C;AAAA;AAAA;AAAA;AAAA,cADF,EAEGE,OAAO,IAAIC,KAAX,iBAAoB;AAAA,kBAAOA;AAAP;AAAA;AAAA;AAAA;AAAA,cAFvB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADkB;AAAA,CAApB;;AAUA,SAAQN,WAAR","sourcesContent":["import React from 'react';\n\n    const renderField = ({ input, label, type, meta: { touched, error } }) => (\n      <div>\n        <label>{label}</label>\n        <div>\n          <input {...input} placeholder={label} type={type} />\n          {touched && error && <span>{error}</span>}\n        </div>\n      </div>\n    );\n\n    export {renderField};"]},"metadata":{},"sourceType":"module"}