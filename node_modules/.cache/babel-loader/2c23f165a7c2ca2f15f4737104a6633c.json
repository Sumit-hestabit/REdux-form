{"ast":null,"code":"var _jsxFileName = \"/var/www/redux-form/redux-form/src/CheckboxGroup.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CheckboxGroup extends React.Component {\n  checkboxGroup() {\n    let {\n      label,\n      required,\n      options,\n      input,\n      meta\n    } = this.props;\n    const hasError = meta.touched && meta.error;\n    return options.map((option, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"checkbox\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              border: touched && error ? \"1px solid red\" : \"none\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              name: `${input.name}[${index}]`,\n              value: option.name,\n              checked: input.value.indexOf(option.name) !== -1,\n              onChange: event => {\n                const newValue = [...input.value];\n\n                if (event.target.checked) {\n                  newValue.push(option.name);\n                } else {\n                  newValue.splice(newValue.indexOf(option.name), 1);\n                }\n\n                return input.onChange(newValue);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 15,\n              columnNumber: 21\n            }, this), option.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 13,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 17\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 13\n      }, this);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.checkboxGroup()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default CheckboxGroup;","map":{"version":3,"sources":["/var/www/redux-form/redux-form/src/CheckboxGroup.js"],"names":["React","CheckboxGroup","Component","checkboxGroup","label","required","options","input","meta","props","hasError","touched","error","map","option","index","border","name","value","indexOf","event","newValue","target","checked","push","splice","onChange","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,aAAN,SAA4BD,KAAK,CAACE,SAAlC,CAA4C;AAExCC,EAAAA,aAAa,GAAG;AACZ,QAAI;AAACC,MAAAA,KAAD;AAAQC,MAAAA,QAAR;AAAkBC,MAAAA,OAAlB;AAA2BC,MAAAA,KAA3B;AAAkCC,MAAAA;AAAlC,QAA0C,KAAKC,KAAnD;AACA,UAAMC,QAAQ,GAAGF,IAAI,CAACG,OAAL,IAAgBH,IAAI,CAACI,KAAtC;AAEA,WAAON,OAAO,CAACO,GAAR,CAAY,CAACC,MAAD,EAASC,KAAT,KAAmB;AAClC,0BACA;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,+BACI;AAAA,iCACA;AAAK,YAAA,KAAK,EAAE;AAAEC,cAAAA,MAAM,EAAEL,OAAO,IAAIC,KAAX,GAAmB,eAAnB,GAAqC;AAA/C,aAAZ;AAAA,oCAEI;AAAO,cAAA,IAAI,EAAC,UAAZ;AACO,cAAA,IAAI,EAAG,GAAEL,KAAK,CAACU,IAAK,IAAGF,KAAM,GADpC;AAEO,cAAA,KAAK,EAAED,MAAM,CAACG,IAFrB;AAGO,cAAA,OAAO,EAAEV,KAAK,CAACW,KAAN,CAAYC,OAAZ,CAAoBL,MAAM,CAACG,IAA3B,MAAqC,CAAC,CAHtD;AAIO,cAAA,QAAQ,EAAGG,KAAD,IAAW;AACjB,sBAAMC,QAAQ,GAAG,CAAC,GAAGd,KAAK,CAACW,KAAV,CAAjB;;AACA,oBAAIE,KAAK,CAACE,MAAN,CAAaC,OAAjB,EAA0B;AACtBF,kBAAAA,QAAQ,CAACG,IAAT,CAAcV,MAAM,CAACG,IAArB;AACH,iBAFD,MAEO;AACHI,kBAAAA,QAAQ,CAACI,MAAT,CAAgBJ,QAAQ,CAACF,OAAT,CAAiBL,MAAM,CAACG,IAAxB,CAAhB,EAA+C,CAA/C;AACH;;AAED,uBAAOV,KAAK,CAACmB,QAAN,CAAeL,QAAf,CAAP;AACH;AAbR;AAAA;AAAA;AAAA;AAAA,oBAFJ,EAgBKP,MAAM,CAACG,IAhBZ;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADJ,SAA+BF,KAA/B;AAAA;AAAA;AAAA;AAAA,cADA;AAuBH,KAxBM,CAAP;AAyBH;;AAEDY,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,gBACK,KAAKxB,aAAL;AADL;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AAvCuC;;AA2C5C,eAAeF,aAAf","sourcesContent":["import React from 'react';\n\nclass CheckboxGroup extends React.Component {\n\n    checkboxGroup() {\n        let {label, required, options, input, meta} = this.props;\n        const hasError = meta.touched && meta.error;\n        \n        return options.map((option, index) => {\n            return (\n            <div className=\"checkbox\" key={index}>\n                <label>\n                <div style={{ border: touched && error ? \"1px solid red\" : \"none\" }}>\n\n                    <input type=\"checkbox\"\n                           name={`${input.name}[${index}]`}\n                           value={option.name}\n                           checked={input.value.indexOf(option.name) !== -1}\n                           onChange={(event) => {\n                               const newValue = [...input.value];\n                               if (event.target.checked) {\n                                   newValue.push(option.name);\n                               } else {\n                                   newValue.splice(newValue.indexOf(option.name), 1);\n                               }\n\n                               return input.onChange(newValue);\n                           }}/>\n                    {option.name}\n                    </div>\n                </label>\n            </div>)\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                {this.checkboxGroup()}\n            </div>\n        )\n    }\n}\n\n\nexport default CheckboxGroup;"]},"metadata":{},"sourceType":"module"}