{"ast":null,"code":"var _jsxFileName = \"/var/www/redux-form/redux-form/src/CheckboxGroup.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CheckboxGroup extends React.Component {\n  checkboxGroup() {\n    let {\n      label,\n      required,\n      options,\n      input,\n      meta\n    } = this.props;\n    return options.map((option, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"checkbox\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            name: `${input.name}[${index}]`,\n            value: option.name,\n            checked: input.value.indexOf(option.name) !== -1,\n            onChange: event => {\n              const newValue = [...input.value];\n\n              if (event.target.checked) {\n                newValue.push(option.name);\n              } else {\n                newValue.splice(newValue.indexOf(option.name), 1);\n              }\n\n              return input.onChange(newValue);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 12,\n            columnNumber: 21\n          }, this), option.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 17\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 13\n      }, this);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.checkboxGroup()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default CheckboxGroup;\nexport const checkboxGroup = _ref => {\n  let {\n    input: {\n      name,\n      ...inputProps\n    },\n    meta: {\n      touched,\n      error,\n      form\n    },\n    touch\n  } = _ref;\n  const hasError = !!(touched && error);\n  return options.map((option, index) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"checkbox\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          name: `${input.name}[${index}]`,\n          value: option.name,\n          checked: input.value.indexOf(option.name) !== -1,\n          onChange: event => {\n            touch(form, name);\n            const newValue = [...input.value];\n\n            if (event.target.checked) {\n              newValue.push(option.name);\n            } else {\n              newValue.splice(newValue.indexOf(option.name), 1);\n            }\n\n            return input.onChange(newValue);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this), hasError && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"This must be ticked!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 37\n        }, this), option.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this);\n  });\n};","map":{"version":3,"sources":["/var/www/redux-form/redux-form/src/CheckboxGroup.js"],"names":["React","CheckboxGroup","Component","checkboxGroup","label","required","options","input","meta","props","map","option","index","name","value","indexOf","event","newValue","target","checked","push","splice","onChange","render","inputProps","touched","error","form","touch","hasError"],"mappings":"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","sourcesContent":["import React from 'react';\n\nclass CheckboxGroup extends React.Component {\n\n    checkboxGroup() {\n        let {label, required, options, input, meta} = this.props;\n\n        return options.map((option, index) => {\n            return (\n            <div className=\"checkbox\" key={index}>\n                <label>\n                    <input type=\"checkbox\"\n                           name={`${input.name}[${index}]`}\n                           value={option.name}\n                           checked={input.value.indexOf(option.name) !== -1}\n                           onChange={(event) => {\n                               const newValue = [...input.value];\n                               if (event.target.checked) {\n                                   newValue.push(option.name);\n                               } else {\n                                   newValue.splice(newValue.indexOf(option.name), 1);\n                               }\n\n                               return input.onChange(newValue);\n                           }}/>\n                    {option.name}\n                </label>\n            </div>)\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                {this.checkboxGroup()}\n            </div>\n        )\n    }\n}\n\n\nexport default CheckboxGroup;\n\n\n\n\n\n\n\nexport const checkboxGroup = ({\n    input: { name, ...inputProps },\n    meta: { touched, error, form },\n    touch\n  }) => {\n    const hasError = !!(touched && error);\n   \n    return options.map((option, index) => {\n        return (\n        <div className=\"checkbox\" key={index}>\n            <label>\n                <input type=\"checkbox\"\n                       name={`${input.name}[${index}]`}\n                       value={option.name}\n                       checked={input.value.indexOf(option.name) !== -1}\n                       onChange={(event) => {\n                           touch(form, name);\n                           const newValue = [...input.value];\n                           if (event.target.checked) {\n                               newValue.push(option.name);\n                           } else {\n                               newValue.splice(newValue.indexOf(option.name), 1);\n                           }\n\n                           return input.onChange(newValue);\n                       }}/>\n                       {hasError && <div>This must be ticked!</div>}\n                {option.name}\n            </label>\n        </div>)\n    });\n  };\n  "]},"metadata":{},"sourceType":"module"}